+++++++++++++++++++++++++++++++++
| Nuxt 3 with Prisma in Supabase database
+++++++++++++++++++++++++++++++++
ติดตั้ง Prisma และเชื่อมต่อ Supabase บน Nuxt
————————————————————————————
Step 1: รันคำสั่งติดตั้ง prisma ผ่าน npm
—
npm install prisma -D

Step 2: ทำการ initial prisma ใน project nuxt
—
npx prisma init

Step 3: สร้างไฟล์ .env แก้ไขการเชื่อมต่อ postgresql
—
DATABASE_URL="postgresql://postgres:123456@localhost:5432/sampleprismadb?schema=public"

Step 4: กำหนด model ใน prisma/schema.prisma
—
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

Step 5: ทำการ migrate database
—
npx prisma migrate dev --name init

Step 6: สร้าง API ในโปรเจ็กต์ Nuxt 3
---
สร้างโฟลเดอร์ชื่อ server/api

Step 7: ทดสอบเรียกใช้งานไฟล์ api ในโฟลเดอร์ api โดยลองสร้างไฟล์ hello.ts
---
export default defineEventHandler((event) => {
    return {
        name: 'Hello World'
    }
})

Step 8: รันโปรเจ็กต์ Nuxt 3 และทดสอบเรียก api ที่ end point
---
http://localhost:3000/api/hello

Step 9: จะเริ่มสร้าง api สำหรับทำ CRUD ตาราง  post สร้างโฟลเดอร์ posts ใน server/api/posts
---

Step 10: สร้างไฟล์ create.post.ts เพื่อเขียนการเพิ่มรายการใหม่เข้าตาราง posts
---
// export default defineEventHandler((event) => {
//     return {
//         api: 'create post'
//     }
// })

import { PrismaClient } from "@prisma/client"

// Interface for User
interface IUser {
  name: string
  email: string
  posts?: IPost[]
}

// Interface for Post
interface IPost {
  title: string
  content: string
  published: boolean
  author?: IUser
}

// Instantiate Prisma Client
const prisma = new PrismaClient()

export default defineEventHandler(async (event) => {
  // Get the reqest body from the event
  const body = await readBody<IPost>(event)

  // console.log(body)
  // Validate the request body
  if (!body.author) {
    throw new Error("Author is required")
  } else if (!body.author.email) {
    throw new Error("Author email is required")
  } else if (!body.author.name) {
    throw new Error("Author name is required")
  } else if (!body.title) {
    throw new Error("Title is required")
  } else if (!body.content) {
    throw new Error("Content is required")
  } else if (body.published === undefined) {
    throw new Error("Published is required")
  } else if (typeof body.published !== "boolean") {
    throw new Error("Published must be a boolean")
  } else {
    // Create a new post with a new user
    const posts = await prisma.post.create({
        data: {
            title: body.title,
            content: body.content,
            published: body.published,
            author: {
                connectOrCreate: {
                    where: {
                        email: body.author!.email
                    },
                    create: {
                        name: body.author!.name,
                        email: body.author!.email
                    }
                },
            }
        }
    })

    // Return the new post
    return {
      status: 200,
      body: posts,
    }
  }
})

Step 11:  สร้างไฟล์ index.get.ts เพื่ออ่านข้อมูล posts
---
import { PrismaClient } from '@prisma/client'

// Instantiate Prisma Client
const prisma = new PrismaClient()

export default defineEventHandler(async (event) => {
    const posts = await prisma.post.findMany()

    return {
        statusCode: 200,
        body: posts
    }
})

Step 12:  สร้างโฟลเดอร์ [id] และไฟล์ index.get.ts เพื่ออ่านข้อมูล posts ตาม id
---
import { PrismaClient } from '@prisma/client'

// Instantiate Prisma Client
const prisma = new PrismaClient()

export default defineEventHandler(async (event) => {

    // Get the id from the event
    const id = event.context.params?.id

    if (!id) {
        throw new Error("Id is required")
    } else {
        const post = await prisma.post.findUnique({
            where: {
                id: Number(id)
            }
        })

        return {
            statusCode: 200,
            body: post
        }
    }
})

Step 13:  สร้างโฟลเดอร์ edit และไฟล์ [id].put.ts เพื่อแก้ไขข้อมูล post ตาม id
---
import { PrismaClient } from "@prisma/client"

// Interface for Post
interface IPost {
    title: string
    content: string
    published: boolean
}

// Instantiate Prisma Client
const prisma = new PrismaClient()

export default defineEventHandler(async (event) => {

    // Get params from event
    const id = event.context.params?.id

    // Get the request body from the event
    const body = await readBody<IPost>(event)

    // Check if ID is provided
  if (!id) {
    throw new Error("ID is required")
  } else if (!body.title) {
    throw new Error("Title is required")
  } else if (!body.content) {
    throw new Error("Content is required")
  } else if (body.published === undefined) {
    throw new Error("Published is required")
  } else if (typeof body.published !== "boolean") {
    throw new Error("Published must be a boolean")
  } else {
    // Update the post
    const post = await prisma.post.update({
      where: {
        id: Number(id)
      },
      data: {
        title: body.title,
        content: body.content,
        published: body.published
      }
    })

    return {
      statusCode: 200,
      body: post
    }
  }

})

Step 14:  สร้างโฟลเดอร์ delete และไฟล์ [id].delete.ts เพื่อลบข้อมูล post ตาม id
---
import { PrismaClient } from "@prisma/client"

// Instantiate Prisma Client
const prisma = new PrismaClient()

export default defineEventHandler(async (event) => {

    // Get params from event
    const id = event.context.params?.id

    if (!id) {
        throw new Error('ID is required')
    } else {
        
        const post = await prisma.post.delete({
            where: {
                id: Number(id)
            }
        })
        
        return {
            statusCode: 200,
            body: post
        }
    }
    
})